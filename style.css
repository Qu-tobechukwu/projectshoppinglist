/** Public Code.gs - Stellies ordering backend (public webapp)
 *  - GET ?action=products  -> returns products JSON
 *  - GET ?action=addresses -> returns addresses JSON
 *  - GET ?action=sponsors  -> returns sponsors active now (max 10)
 *  - POST                 -> accept order payload, append to Orders sheet, send emails
 *
 * Deployment: Deploy as Web App (Execute as: Me; Who has access: Anyone, even anonymous)
 */

// === CONFIG - keep your existing IDs ===
const PRODUCTS_SPREADSHEET_ID = "1-ZXAahTTVrhfS-EI5d9e4_EeJHoX1jsHlvLEsaGCRhc";
const ADDRESSES_SPREADSHEET_ID = "1lw4l01Qyc_5lAYTql7zKLhGF4DVD-1cxEFyK7dCi2TQ";
const ORDERS_SPREADSHEET_ID    = "1b6CkJ9OcvDKQpFpSO2VNxqi2ZAciezPWSrQBGE3n08M";

const PRODUCTS_SHEET_NAME = "Products";
const ADDRESSES_SHEET_NAME = "Addresses";
const ORDERS_SHEET_NAME = "Orders";
const SPONSORS_SHEET_NAME = "Sponsors";

const ADMIN_EMAIL = "info@stelliesdinnerpacks.com"; // email to receive admin notifications

function doGet(e) {
  const action = (e && e.parameter && e.parameter.action) ? e.parameter.action : '';
  const out = ContentService.createTextOutput();
  out.setMimeType(ContentService.MimeType.JSON);

  try {
    if (action === "products") {
      const products = readProducts();
      out.setContent(JSON.stringify({ success: true, products }));
    } else if (action === "addresses") {
      const addresses = readAddresses();
      out.setContent(JSON.stringify({ success: true, addresses }));
    } else if (action === "sponsors") {
      const sponsors = readSponsors();
      out.setContent(JSON.stringify({ success: true, sponsors }));
    } else {
      out.setContent(JSON.stringify({ success: false, message: "Invalid action. Use ?action=products|addresses|sponsors or POST order." }));
    }
  } catch (err) {
    out.setContent(JSON.stringify({ success: false, message: err.toString() }));
  }
  return out;
}

function doPost(e) {
  const out = ContentService.createTextOutput();
  out.setMimeType(ContentService.MimeType.JSON);
  try {
    if (!e || !e.postData || !e.postData.contents) {
      out.setContent(JSON.stringify({ success: false, message: "No post data" }));
      return out;
    }
    const payload = JSON.parse(e.postData.contents);
    const orderNumber = appendOrder(payload);
    out.setContent(JSON.stringify({ success: true, message: "Order saved", orderNumber }));
    return out;
  } catch (err) {
    out.setContent(JSON.stringify({ success: false, message: err.toString() }));
    return out;
  }
}

/* Read Products from Products spreadsheet
Expect header row:
Item,Price,HasFlavours,Flavours,BulkThreshold,BulkDiscountPercent
*/
function readProducts() {
  const ss = SpreadsheetApp.openById(PRODUCTS_SPREADSHEET_ID);
  const sheet = ss.getSheetByName(PRODUCTS_SHEET_NAME);
  if (!sheet) throw new Error("Products sheet not found");
  const rows = sheet.getDataRange().getValues();
  if (rows.length <= 1) return [];
  const headers = rows.shift();
  return rows.map(r => {
    return {
      item: String(r[0] || "").trim(),
      price: Number(r[1] || 0),
      hasFlavours: String(r[2] || "").toUpperCase() === "TRUE",
      flavours: String(r[3] || "").split(",").map(s => s.trim()).filter(Boolean),
      bulkThreshold: Number(r[4] || 0),
      bulkDiscountPercent: Number(r[5] || 0)
    };
  });
}

/* Read Addresses sheet (single-column list) */
function readAddresses() {
  const ss = SpreadsheetApp.openById(ADDRESSES_SPREADSHEET_ID);
  const sheet = ss.getSheetByName(ADDRESSES_SHEET_NAME);
  if (!sheet) throw new Error("Addresses sheet not found");
  const rows = sheet.getDataRange().getValues();
  if (rows.length <= 1) return [];
  rows.shift();
  return rows.map(r => String(r[0] || "").trim()).filter(Boolean);
}

/* Read Sponsors from Products spreadsheet tab 'Sponsors'
Expected header: AdImage,AdLink,StartDate,EndDate,Priority,Title,Alt
Filter by current date and return up to 10 sorted by Priority asc
*/
function readSponsors() {
  const ss = SpreadsheetApp.openById(PRODUCTS_SPREADSHEET_ID);
  const sheet = ss.getSheetByName(SPONSORS_SHEET_NAME);
  if (!sheet) return [];
  const rows = sheet.getDataRange().getValues();
  if (rows.length <= 1) return [];
  const headers = rows.shift();
  const today = new Date();
  const sponsors = rows.map(r => {
    return {
      image: String(r[0] || "").trim(),
      link: String(r[1] || "").trim(),
      start: r[2] ? new Date(r[2]) : null,
      end:   r[3] ? new Date(r[3]) : null,
      priority: Number(r[4] || 0),
      title: String(r[5] || "").trim(),
      alt: String(r[6] || "").trim()
    };
  }).filter(s => {
    // show if no dates set OR today between start & end if specified
    if (!s.start && !s.end) return true;
    if (s.start && s.end) return s.start <= today && today <= s.end;
    if (s.start && !s.end) return s.start <= today;
    if (!s.start && s.end) return today <= s.end;
    return false;
  }).sort((a,b) => (a.priority||0) - (b.priority||0)).slice(0,10);

  // strip Date objects to ISO strings for JSON
  return sponsors.map(s => ({
    image: s.image, link: s.link, title: s.title, alt: s.alt, priority: s.priority,
    start: s.start ? s.start.toISOString().slice(0,10) : "", end: s.end ? s.end.toISOString().slice(0,10) : ""
  }));
}

/* Append order to Orders sheet and send emails.
Rows appended:
OrderNumber, Name, Phone, Email, Delivery, Tip, Notes, Items, Total, Timestamp, PaymentToken, Packed, PackedTimestamp
*/
function appendOrder(payload) {
  const ss = SpreadsheetApp.openById(ORDERS_SPREADSHEET_ID);
  const sheet = ss.getSheetByName(ORDERS_SHEET_NAME);
  if (!sheet) throw new Error("Orders sheet not found");

  const orderNumber = payload.orderNumber || ("SDP-" + Math.floor(1000 + Math.random() * 9000));
  const name = payload.name || "";
  const phone = payload.phone || "";
  const email = payload.email || "";
  const delivery = payload.delivery || "";
  const tip = Number(payload.tip || 0);
  const notes = payload.notes || "";
  const paymentToken = payload.paymentToken || "";
  const total = Number(payload.total || 0);

  const items = (payload.items || []).map(i => {
    const f = i.flavour ? ` (${i.flavour})` : "";
    return `${i.itemName}${f} x${i.qty} - R${Number(i.price||0).toFixed(2)}`;
  }).join("; ");

  const timestamp = new Date();
  const packed = false;
  const packedTimestamp = "";

  // Append (match column order described above)
  sheet.appendRow([orderNumber, name, phone, email, delivery, tip, notes, items, total, timestamp, paymentToken, packed, packedTimestamp]);

  // Send emails
  const subjectAdmin = `New Order: ${orderNumber} — Stellies Dinner Packs`;
  const bodyAdmin = [
    `Order Number: ${orderNumber}`,
    `Time: ${timestamp}`,
    `Name: ${name}`,
    `Phone: ${phone}`,
    `Email: ${email}`,
    `Delivery: ${delivery}`,
    `Tip: R${tip}`,
    `Notes: ${notes}`,
    `Total: R${total}`,
    ``,
    `Items:`,
    items,
    ``,
    `-- Stellies Dinner Packs`
  ].join('\n');

  MailApp.sendEmail(ADMIN_EMAIL, subjectAdmin, bodyAdmin);

  if (email && email.indexOf('@') !== -1) {
    const subjectCust = `Your Stellies Order: ${orderNumber}`;
    const bodyCust = [
      `Hi ${name || 'Customer'},`,
      ``,
      `Thanks for ordering with Stellies Dinner Packs!`,
      ``,
      `Order number: ${orderNumber}`,
      `Total: R${total}`,
      ``,
      `We will message you on WhatsApp when your order is ready.`,
      ``,
      `Order details:`,
      items,
      ``,
      `— Stellies Dinner Packs`
    ].join('\n');
    MailApp.sendEmail(email, subjectCust, bodyCust);
  }

  return orderNumber;
}
